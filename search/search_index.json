{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto 2024.2","text":"<p>Info</p> <p>PROJETO: INDIVIDUAL</p> <p>DEADLINE: 22.nov.2024</p> <p>O projeto do semestre trata de uma API RESTful que deve ser capaz de cadastrar e autenticar usu\u00e1rios. Logo, para a execu\u00e7\u00e3o do projeto, \u00e9 necess\u00e1rio a constru\u00e7\u00e3o de uma API RESTful para validar a infraestrutura de um aplicativo. Ap\u00f3s a constru\u00e7\u00e3o da API, o projeto deve ser dockerizado e, ent\u00e3o, implantado no AWS. A fim de realizar todo o projeto, ele foi dividido em 2 etapas:</p> <ol> <li> <p>Dockerinzing</p> </li> <li> <p>AWS</p> </li> </ol> <p>A base do projeto \u00e9 a constru\u00e7\u00e3o da API.</p>"},{"location":"#construcao-da-api","title":"Constru\u00e7\u00e3o da API","text":"<p>O aplicativo teve ser uma API RESTful simples, sem interface visual. Sendo que a API deve ser capaz de cadastrar e autenticar usu\u00e1rios, al\u00e9m de permitir a consulta de dados de terceiros.</p> <p>A API dever ter no m\u00ednimo 3 endpoints:</p> Registro de Usu\u00e1rio Endpoint<pre><code>POST /registrar\n</code></pre> <p>Request JSON payload<pre><code>{\n    \"nome\": \"Disciplina Cloud\",\n    \"email\": \"cloud@insper.edu.br\",\n    \"senha\": \"cloud0\"\n}\n</code></pre></p> <p>Response JSON payload<pre><code>{\n    \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkRpc2NpcGxpbmEgQ2xvdWQiLCJpYXQiOjE1MTYyMzkwMjJ9.s76o9X4UIANSI-aTF8UhqnBYyIRWw_WH4ut8Xqmo6i0\"\n}\n</code></pre></p> <pre><code>sequenceDiagram\n    autonumber\n    actor Alice\n    Alice-&gt;&gt;+App: POST /registrar\n    App-&gt;&gt;+Postgres: consulta email\n    break se email encontrado\n        Postgres--&gt;&gt;Alice: error 409\n    end\n    App-&gt;&gt;Postgres: grava dados e hash da senha no bd\n    App-&gt;&gt;App: gera JWT Token\n    App--&gt;&gt;-Alice: retorna JWT Token</code></pre> <p>Senha</p> <p>Nunca guarde a senha do usu\u00e1rio no banco, apenas uma hash da senha.</p> Autentica\u00e7\u00e3o de Usu\u00e1rio Endpoint<pre><code>POST /login\n</code></pre> <p>Request JSON payload<pre><code>{\n    \"email\": \"cloud@insper.edu.br\",\n    \"senha\": \"cloud0\"\n}\n</code></pre></p> <p>Response JSON payload<pre><code>{\n    \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\n            eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkRpc2N\n            pcGxpbmEgQ2xvdWQiLCJpYXQiOjE1MTYyMzkwMjJ9.\n            s76o9X4UIANSI-aTF8UhqnBYyIRWw_WH4ut8Xqmo6i0\"\n}\n</code></pre></p> <p>Diagrama de Sequ\u00eancia <pre><code>sequenceDiagram\n    autonumber\n    actor Alice\n    Alice-&gt;&gt;+App: POST /login\n    App-&gt;&gt;+Postgres: consulta email e hash no db\n    break se email n\u00e3o encontrado\n        Postgres--&gt;&gt;Alice: error 401\n    end\n    break se email e senha n\u00e3o confere\n        Postgres--&gt;&gt;Alice: error 401\n    end\n    App-&gt;&gt;App: gera JWT Token\n    App--&gt;&gt;-Alice: retorna JWT Token\n</code></pre></p> Aquisi\u00e7\u00e3o dos Dados Endpoint<pre><code>GET /consultar\n\n### HEADER\nAuthorization: Bearer &lt;JWT&gt;\n</code></pre> <p>Response</p> <p>A resposta pode ser qualquer scrap de uma p\u00e1gina de terceiros, no caso aqui, temos um scrap dos dados do \u00edndice Bovespa, apenas os \u00faltimos 10 dias, partindo da data de consulta. O formato tamb\u00e9m pode ser qualquer um, aqui temos um exemplo do mesmo dado em CSV e JSON.</p> DadosCSVJSON Date Open High Low Close Volume 2024-09-05 136112.0 136656.0 135959.0 136502.0 7528700 2024-09-06 136508.0 136653.0 134476.0 134572.0 7563300 2024-09-09 134574.0 135250.0 134399.0 134737.0 6587600 2024-09-10 134738.0 134738.0 133754.0 134320.0 8253500 2024-09-11 134319.0 135087.0 133757.0 134677.0 7947300 2024-09-12 134677.0 134777.0 133591.0 134029.0 7004900 2024-09-13 134031.0 135879.0 134031.0 134882.0 8866000 2024-09-16 134885.0 135715.0 134870.0 135118.0 6707000 <pre><code>Date,Open,High,Low,Close,Volume\n2024-09-05,136112.0,136656.0,135959.0,136502.0,7528700\n2024-09-06,136508.0,136653.0,134476.0,134572.0,7563300\n2024-09-09,134574.0,135250.0,134399.0,134737.0,6587600\n2024-09-10,134738.0,134738.0,133754.0,134320.0,8253500\n2024-09-11,134319.0,135087.0,133757.0,134677.0,7947300\n2024-09-12,134677.0,134777.0,133591.0,134029.0,7004900\n2024-09-13,134031.0,135879.0,134031.0,134882.0,8866000\n2024-09-16,134885.0,135715.0,134870.0,135118.0,6707000\n</code></pre> <pre><code>[\n    {\"Date\":\"2024-09-05\",\"Open\":136112.0,\"High\":136656.0,\"Low\":135959.0,\"Close\":136502.0,\"Volume\":7528700},\n    {\"Date\":\"2024-09-06\",\"Open\":136508.0,\"High\":136653.0,\"Low\":134476.0,\"Close\":134572.0,\"Volume\":7563300},\n    {\"Date\":\"2024-09-09\",\"Open\":134574.0,\"High\":135250.0,\"Low\":134399.0,\"Close\":134737.0,\"Volume\":6587600},\n    {\"Date\":\"2024-09-10\",\"Open\":134738.0,\"High\":134738.0,\"Low\":133754.0,\"Close\":134320.0,\"Volume\":8253500},\n    {\"Date\":\"2024-09-11\",\"Open\":134319.0,\"High\":135087.0,\"Low\":133757.0,\"Close\":134677.0,\"Volume\":7947300},\n    {\"Date\":\"2024-09-12\",\"Open\":134677.0,\"High\":134777.0,\"Low\":133591.0,\"Close\":134029.0,\"Volume\":7004900},\n    {\"Date\":\"2024-09-13\",\"Open\":134031.0,\"High\":135879.0,\"Low\":134031.0,\"Close\":134882.0,\"Volume\":8866000},\n    {\"Date\":\"2024-09-16\",\"Open\":134885.0,\"High\":135715.0,\"Low\":134870.0,\"Close\":135118.0,\"Volume\":6707000}\n]\n</code></pre> <pre><code>sequenceDiagram\n    autonumber\n    actor Alice\n    Alice-&gt;&gt;+App: GET /consultar &lt;br&gt; Token JWT no header\n    App--&gt;&gt;App: verifica permiss\u00e3o do JWT\n    break se JWT ausente ou inv\u00e1lido\n        App--&gt;&gt;Alice: error 403\n    end\n    App--&gt;&gt;App: web scraping&lt;br&gt;solicita dados de uma base ou p\u00e1gina&lt;br&gt;de um 3th party\n    Note right of App: Adquire dados da internet, &lt;br&gt;fazendo scraping de quaisquer&lt;br&gt; dados interessantes para o aluno.&lt;br&gt;O conte\u00fado deve ter atualiza\u00e7\u00e3o frequente.\n    App--&gt;&gt;-Alice: retorna dados</code></pre> <p>Aquisi\u00e7\u00e3o dos Dados</p> <p>Os dados devolvidos pela consulta devem ser de uma p\u00e1gina de terceiros, e devem ser atualizados frequentemente. Caso o usu\u00e1rio n\u00e3o tenha um token v\u00e1lido, a API deve retornar um erro 403.</p> <p>A escolha dos dados \u00e9 livre, mas deve ser algo que possa ser atualizado frequentemente, ao menos, diariamente. Claro, respeitando os termos de uso do site.</p> <p>Tip</p> <p>O projeto pode ser desenvolvido em qualquer linguagem de programa\u00e7\u00e3o, mas \u00e9 recomendado o uso de Python ou Java.</p>"},{"location":"#dockerinzing","title":"Dockerinzing","text":"<p>Quando o c\u00f3digo da API estiver pronto, ele deve ser dockerizado. Para isso, voc\u00ea deve criar um arquivo <code>Dockerfile</code> (de acordo com a linguagem e ambiente de execu\u00e7\u00e3o escolhidos) e um <code>compose.yaml</code> para a execu\u00e7\u00e3o da aplica\u00e7\u00e3o.</p> <p>O docker compose deve conter pelo menos 2 servi\u00e7os: a aplica\u00e7\u00e3o e o banco de dados. A aplica\u00e7\u00e3o deve ser capaz de se conectar ao banco de dados e realizar as opera\u00e7\u00f5es de CRUD. Conforme ilustrado abaixo:</p> <pre><code>flowchart LR\n  subgraph docker compose\n    direction TB\n    App --&gt; Postgres\n    Postgres --&gt; App\n  end</code></pre> <p>A aplica\u00e7\u00e3o deve ser autocontida, ou seja, deve ser poss\u00edvel executar a aplica\u00e7\u00e3o apenas com o comando <code>docker compose up</code> - pois isso \u00e9 parte essencial da entrega.</p> docker compose up -d[+] Running 2/2 \u2714 Container database   Started   0.3s \u2714 Container app        Started   0.5sdocker compose psNAME           SERVICE       STATUS     PORTSapp            app           Up         0.0.0.0:8080-&gt;8080/tcpdatabase       postgres      Up <p>Para organiza\u00e7\u00e3o, \u00e9 sugerida a seguinte estrutura de diret\u00f3rios:</p> estrutura de diret\u00f3rio sugerida<pre><code>\ud83d\udcc1 app\n\u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n\u251c\u2500\u2500 \ud83d\udcc4 app.py\n\u251c\u2500\u2500 \ud83d\udcc4 requirements.txt\n\u2514\u2500\u2500 \ud83d\udcc4 ...\n\ud83d\udcc4 compose.yaml\n</code></pre>"},{"location":"#publicacao-no-docker-hub","title":"Publica\u00e7\u00e3o no Docker Hub","text":"<p>Ap\u00f3s a dockeriza\u00e7\u00e3o, o projeto deve ser publicado no Docker Hub. O link do Docker Hub deve ser inclu\u00eddo na documenta\u00e7\u00e3o do projeto.</p> <p>Publica\u00e7\u00e3o no Docker Hub</p> <p>A publica\u00e7\u00e3o no docker hub deve ser feita via linha de comando. E os comandos utilizados devem ser inclu\u00eddos na documenta\u00e7\u00e3o do projeto.</p>"},{"location":"#entrega","title":"Entrega","text":"<p>A entrega dever\u00e1 ser um link do projeto no GitHub, contendo o c\u00f3digo da API e o Dockerfile.</p> <p>Entrega</p> <p>Deve haver uma documenta\u00e7\u00e3o b\u00e1sica no README.md do reposit\u00f3rio:</p> <ul> <li>nome do aluno;</li> <li>explica\u00e7\u00e3o do projeto - scrap do que foi feito;</li> <li>explica\u00e7\u00e3o de como executar a aplica\u00e7\u00e3o;</li> <li>documenta\u00e7\u00e3o dos endpoints da API;</li> <li>screenshot com os endpoints testados;</li> <li>video de execu\u00e7\u00e3o da aplica\u00e7\u00e3o - de at\u00e9 1 minuto;</li> <li>link para o docker hub do projeto;</li> <li>refer\u00eancia expl\u00edcita a localiza\u00e7\u00e3o do arquivo <code>compose.yaml</code>;</li> <li>o arquivo <code>compose.yaml</code> FINAL (entregue) deve ser consumir apenas images do docker hub, ou seja, n\u00e3o deve ter build dentro dele.</li> </ul> <p>Vari\u00e1veis de Ambiente</p> <p>As credenciais do banco de dados e JWT devem ser passadas via vari\u00e1veis de ambiente, por um arquivo <code>.env</code>. Todavia, PARA FACILITAR A CORRE\u00c7\u00c3O, as credenciais podem ser passadas diretamente no <code>compose.yaml</code> por valores padr\u00f5es, para que n\u00e3o tenha que haver um arquivo de vari\u00e1veis de ambiente. Exemplo:</p> compose.yaml<pre><code>name: app\n\n    db:\n        image: postgres:17\n        environment:\n            POSTGRES_DB: ${POSTGRES_DB:-projeto} # (1)!\n            POSTGRES_USER: ${POSTGRES_USER:-projeto}\n            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n        ports:\n            - 5432:5432 #(2)!\n</code></pre> <ol> <li> <p>Caso a vari\u00e1vel de ambiente <code>POSTGRES_DB</code> n\u00e3o exista ou seja nula - n\u00e3o seja definida no arquivo <code>.env</code> - o valor padr\u00e3o ser\u00e1 <code>projeto</code>. Vide documenta\u00e7\u00e3o.</p> </li> <li> <p>Aqui \u00e9 feito um t\u00fanel para a porta 5432 do container do banco de dados, para a porta 5432 do host (no caso localhost). Em um ambiente de produ\u00e7\u00e3o, essa porta n\u00e3o deve ser exposta, pois ningu\u00e9m de fora do compose deveria acessar o banco de dados diretamente.</p> </li> </ol> .env<pre><code>POSTGRES_DB=superprojeto\nPOSTGRES_USER=meuprojeto\nPOSTGRES_PASSWORD=S3cr3t\n</code></pre> <p>Ao executar, o docker compose ir\u00e1 utilizar as vari\u00e1veis de ambiente do arquivo <code>.env</code>, caso existam, sen\u00e3o, utilizar\u00e1 os valores padr\u00f5es definidos j\u00e1 dentro do arquivo <code>compose.yaml</code>.</p> <p>Seguran\u00e7a</p> <p>Num ambiente de trabalho, as credenciais do banco de dados e JWT devem ser passadas via vari\u00e1veis de ambiente, nunca diretamente no c\u00f3digo. Essa estrat\u00e9gia viabiliza, at\u00e9 mesmo, que hajam credenciais diferentes para cada ambiente (dev, test, prod).</p> <p>NUNCA coloque credenciais no reposit\u00f3rio, mesmo que seja um reposit\u00f3rio privado. Ou seja, NUNCA coloque um arquivo <code>.env</code> no reposit\u00f3rio (GitHub).</p> <p>NUNCA deixe portas expostas em produ\u00e7\u00e3o, a menos que seja estritamente necess\u00e1rio.</p> <p>Documenta\u00e7\u00e3o</p> <p>A documenta\u00e7\u00e3o \u00e9 um dos pontos mais importantes do projeto. Seja criativo e use imagens, gifs, tabelas, etc. Tamb\u00e9m, se poss\u00edvel, fa\u00e7a uso de  ferramentas:</p> <ul> <li>mkdocs para gerar a documenta\u00e7\u00e3o e hosped\u00e1-la no GitHub Pages.</li> <li>mermaid para gerar diagramas de sequ\u00eancia, fluxogramas, etc.</li> </ul>"},{"location":"#aws","title":"AWS","text":"<p>O pr\u00f3ximo passo \u00e9 implantar a aplica\u00e7\u00e3o no AWS. A implanta\u00e7\u00e3o deve ser feita utilizando o Elastic Kubernetes Service (EKS). A aplica\u00e7\u00e3o deve ser implantada em um cluster EKS.</p> <p>O Kubernetes \u00e9 uma ferramenta de orquestra\u00e7\u00e3o de cont\u00eaineres que automatiza a implanta\u00e7\u00e3o, o dimensionamento e a gest\u00e3o de aplica\u00e7\u00f5es em cont\u00eaineres. O EKS \u00e9 um servi\u00e7o gerenciado que facilita a execu\u00e7\u00e3o do Kubernetes na AWS.</p> <p>Voc\u00ea deve subir um cluster EKS e implantar dois PODs, sendo um da aplica\u00e7\u00e3o e outro do banco de dados. A aplica\u00e7\u00e3o deve ser capaz de se conectar ao banco de dados e realizar as opera\u00e7\u00f5es de endpoints da API acima descritas.</p>"},{"location":"#entrega_1","title":"Entrega","text":"<p>A entrega dever\u00e1 ser um link do projeto no GitHub, o mesmo do anterior, mas para uma sess\u00e3o sobre a publica\u00e7\u00e3o na AWS, contendo o uma breve explica\u00e7\u00e3o e um link para um v\u00eddeo, explicando e executando o trabalho entregue.</p> <p>Entrega</p> <p>O v\u00eddeo apresentado deve ter entre 3 e 5 minutos e DEVE demonstrar TODOS os seguintes itens:</p> <ul> <li>logar na conta e acessar o projeto;</li> <li>explicar o que foi feito e mostrar os componentes do projeto (eks, roles, etc);</li> <li>executar o comando <code>kubectl get pods</code> e mostrar os pods rodando;   <pre><code>kubectl get pods\n</code></pre></li> <li>mostrar o projeto executando na AWS: chamada da API por um cliente (curl, postman, etc);</li> </ul> <p>No texto deve haver um link para os arquivos de configura\u00e7\u00e3o do Kubernetes (arquivos .yaml: deployment.yaml, service.yaml, etcs), reposit\u00f3rio do projeto.</p>"},{"location":"#rubrica","title":"Rubrica","text":"<p>Rubrica</p> Etapa Crit\u00e9rio Nota Observa\u00e7\u00f5es 1 API + Dockeriza\u00e7\u00e3o + Docker Hub + Documenta\u00e7\u00e3o C C+at\u00e9 25.out 2 AWS + 1 conceito - 2 conceitos se n\u00e3o entregar a etapa do AWS AWS + Documenta\u00e7\u00e3o + 2 conceitos <p>Ponto extra</p> <p>Se a primeira etapa for entregue at\u00e9 o dia 25.out, o aluno ganha meio conceito extra na nota final, ou seja, se ele tirar C, fica com C+.</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<ol> <li> <p>Introduction to JSON Web Tokens \u21a9</p> </li> <li> <p>How to containerize different types of services \u21a9</p> </li> <li> <p> Como criar um cluster Kubernetes na AWS com EKS por Fabricio Veronez \u21a9</p> </li> </ol>"}]}